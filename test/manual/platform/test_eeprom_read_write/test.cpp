// Copyright (c) 2024 anabrid GmbH
// Contact: https://www.anabrid.com/licensing/
//
// SPDX-License-Identifier: MIT OR GPL-2.0-or-later

#include <Arduino.h>
#include <unity.h>

#ifndef ANABRID_PEDANTIC
#error "This test requires pedantic mode."
#endif

#include "block/blocks.h"
#include "chips/EEPROM25AA02.h"
#include "entity/entity.h"

using namespace blocks;
using namespace functions;
using namespace metadata;

/*
        Test case for reading and writing a whole block EEPROM. Usable for miscellaneous tasks for example
   creating backups when testing new EEPROM layouts. Outputs data in formated hex code which can directly be
   passed into the write function.
*/

uint8_t target = UBlock::BLOCK_IDX;

void test_read_eeprom() {
  std::array<uint8_t, 128> read_data;
  EEPROM25AA02 eeprom(bus::idx_to_addr(0, target, 0));

  TEST_ASSERT(eeprom.read(0, read_data.size(), read_data.data()));

  Serial.println("\nEEPROM data:");
  for (size_t i = 0; i < read_data.size(); i++) {
    Serial.print("0x");
    Serial.print(+read_data[i], HEX);
    if (i != read_data.size() - 1)
      Serial.print(", ");
  }
  Serial.println("");
}

void test_write_eeprom() {
  // old U Block data
  std::array<uint8_t, 128> read_data = {
      0xFF, 0xFF, 0xFF, 0x4,  0x1,  0x1,  0x1,  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
  EEPROM25AA02 eeprom(bus::idx_to_addr(0, target, 0));

  TEST_ASSERT(eeprom.write(0, read_data.size(), read_data.data()));
}

void setup() {
  bus::init();

  UNITY_BEGIN();
  RUN_TEST(test_read_eeprom);
  // RUN_TEST(test_write_eeprom);
  UNITY_END();
}

void loop() { delay(100); }
